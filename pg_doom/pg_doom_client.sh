#!/bin/bash -e

# Отключаем отображение нажатых символов на экране
stty -echo

# Очищаем экран
clear

# Получаем размеры окна. Можно задать вручную фиксированный размер:
#  - максимальное эффективное разрешение   - 320,200
#  - для медленного SSH                    - 120,40
#  - для быстрого SSH и размера шрифта 4pt - 280,90
cols=$(expr $(tput cols  || 281) - 1)
rows=$(expr $(tput lines ||  92) - 2)

# В бесконечном цикле периодически отправляем SQL запросы через утилиту psql.
{
    while true; do
        # Считываем нажатые клавиши:
        #   '-n 1'    - один символ за раз
        #   '-s'      - не выводим введённые символы на экран
        #   '-t 0.02' - ждём нового символа не более указанного времени
        #   'k'       - сохранить введённые символы в переменную 'k'
        while read -n 1 -s -t 0.02 k; do
            # Отправляем считанные кнопки.
            # Управление кнопками A,S,D,W,F,E.
            echo "CALL doom.input('$k',10);";
        done;
        # Выводим на экран ASCII-код перевода курсора в терминале в левый верхний угол
        echo "SELECT '\\x1B[H';";
        # Выводим результат запроса содержимого экрана.
        # В качестве параметра функции указывается расрешение экрана по горизонтали и по вертикали в символах.
        echo "SELECT linetext FROM doom.screen($cols,$rows);";
        # Пауза перед отправкой следуюдщего запроса.
        # Необходимо подобрать значение в зависимости от скорости соединения.
        # Если будет слишком маленькое, то команды будут формироваться быстрее чем выполняются. Появится лаг.
        # Если взять слишком большое, то картинка будет медленно обновляться.
        sleep 0.2;
    done;
} |
# Подключаемся к СУБД:
#  '-P pager=off' - отключаем скроллирование вывода
#  '-t'           - вывод только данных, без орнамента таблицы
#  '-q'           - не отображаем дополнительных сообщений
psql "$@" -P pager=off -t -q |
# Восстанавливаем заэкранированный утилитой psql спец-символы перед выводом на экран чтобы работали цвета в терминале.
sed 's|\\x1B|\x1B|g'


